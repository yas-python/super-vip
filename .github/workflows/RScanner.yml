# Name of the workflow
name: Rust Proxy Scanner (Ultimate)

# Triggers for the workflow
on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 * * * *'  # Runs automatically every hour

# Ensures only one instance of this workflow runs at a time
concurrency:
  group: rust-proxy-scan
  cancel-in-progress: true

# Environment variables available to all jobs
env:
  # --- Configuration ---
  CARGO_TERM_COLOR: always
  KEEP_DEPLOYMENTS: '1' # Number of recent deployments to keep (2 is safer: current + previous)
  CACHE_FILE: .cachelastbestip.txt # File to cache the last best IP
  RUST_CACHE_KEY: v1 # Increment this to manually invalidate the Rust cache

jobs:
  # This job finds the best proxy and updates Cloudflare
  update-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      bestip: ${{ steps.scan.outputs.bestip }}

    steps:
    # 1. Checkout the repository code
    - name: Checkout repo
      uses: actions/checkout@v4

    # 2. Set up the necessary tools
    - name: Setup environment
      run: |
        sudo apt-get update -y
        sudo apt-get install -y jq curl python3 python3-pip netcat-openbsd
        python3 -m pip install --no-cache-dir requests

    # 3. Restore best IP from cache (will be saved automatically at the end of the job)
    - name: Manage Best IP Cache
      uses: actions/cache@v4
      id: ip-cache
      with:
        path: ${{ env.CACHE_FILE }}
        key: rust-proxy-scanner-best-ip-cache

    # 4. Install Rust toolchain and cache dependencies for faster builds
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    # NOTE: The "Cache not found" warning you see is NORMAL for the first run.
    # The cache is saved at the end of the job, so the warning will disappear on the next run.
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ env.RUST_CACHE_KEY }}

    # 5. Build the scanner program
    - name: Build Rust project
      run: cargo build --release

    # 6. Run the scanner and find the best IP with the lowest latency
    - name: Run scanner and choose best IP
      id: scan
      run: |
        set -euo pipefail # Exit on any error, making the script more robust
        BIN="./target/release/RScanner"
        chmod +x "$BIN"
        : > scan.log # Clear previous log

        echo "üöÄ Starting proxy scan..."
        $BIN 2>&1 | tee -a scan.log || echo "‚ö†Ô∏è Scanner exited with a non-zero status. Will try to find proxies in partial results."

        BEST=""
        BEST_LAT=""

        echo "üîç Analyzing scan results..."
        awk '
          BEGIN{IGNORECASE=1}
          /PROXY[[:space:]]+LIVE/ {
            if (match($0, /\(([0-9]+)[[:space:]]*ms\)/, lat)) { latency=lat[1] } else next
            if (match($0, /([0-9]{1,3}(\.[0-9]{1,3}){3})/ , addr)) { ip=addr[1] } else next
            print latency, ip
          }
        ' scan.log | sort -n -k1,1 > candidates.txt

        if [ -s candidates.txt ]; then
          BEST_LAT=$(awk 'NR==1{print $1}' candidates.txt)
          BEST=$(awk 'NR==1{print $2}' candidates.txt)
          echo "‚úÖ Selected best candidate from new scan: $BEST (latency: ${BEST_LAT} ms)"
        else
          echo "üü° No live proxies found in the new scan. Checking for a cached IP."
        fi

        if [ -z "$BEST" ] && [ -f "${CACHE_FILE}" ]; then
          BEST="$(tr -d ' \r\n' < ${CACHE_FILE})"
          echo "‚úÖ Using cached best IP: $BEST"
        fi

        if [ -z "${BEST:-}" ]; then
          echo "‚ùå FATAL: No best candidate found from scan or cache. Aborting."
          exit 1
        fi

        echo "üíæ Saving '$BEST' to cache file and GitHub output."
        echo "$BEST" > ${CACHE_FILE}
        echo "bestip=$BEST" >> "$GITHUB_OUTPUT"

    # 7. Upload the scan log as an artifact for debugging
    - name: Upload scan.log for debug
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scan-log-${{ github.run_id }}
        path: scan.log

    # 8. Update the environment variable in Cloudflare Pages
    - name: Update Cloudflare Pages env var
      env:
        CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_PROJECT_NAME: ${{ secrets.CF_PROJECT_NAME }}
        CF_VAR_NAME: ${{ secrets.CF_VAR_NAME }}
        BESTIP: ${{ steps.scan.outputs.bestip }}
      run: |
        set -euo pipefail
        if [ -z "${BESTIP:-}" ]; then
          echo "‚ùå ERROR: BESTIP is empty; aborting Cloudflare update."
          exit 1
        fi
        API_URL="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT_NAME}"
        JSON_PAYLOAD=$(jq -n \
          --arg var_name "$CF_VAR_NAME" \
          --arg var_value "$BESTIP" \
          '{deployment_configs: {production: {env_vars: {($var_name): {value: $var_value}}}}}')

        echo "üì° Sending PATCH request to Cloudflare API to update variable..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "$API_URL" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data "$JSON_PAYLOAD")

        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        if [ "$HTTP_CODE" -ne 200 ]; then
          echo "‚ùå Error: Cloudflare API returned HTTP status $HTTP_CODE"
          echo "Response Body: $BODY"
          exit 1
        fi
        echo "‚úÖ Cloudflare variable '${CF_VAR_NAME}' updated successfully to '${BESTIP}'."

    # 9. Trigger a new deployment in Cloudflare Pages
    - name: Trigger Cloudflare Pages deploy
      env:
        CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_PROJECT_NAME: ${{ secrets.CF_PROJECT_NAME }}
      run: |
        set -euo pipefail
        echo "üöÄ Triggering a new deployment..."
        curl --fail -s -X POST "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT_NAME}/deployments" \
        -H "Authorization: Bearer ${CF_API_TOKEN}" \
        -H "Content-Type: application/json"
        echo "‚úÖ New deployment successfully triggered."

    # 10. Clean up old deployments to avoid hitting Cloudflare limits
    - name: Cleanup old deployments
      if: always()
      env:
        CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_PROJECT_NAME: ${{ secrets.CF_PROJECT_NAME }}
        KEEP: ${{ env.KEEP_DEPLOYMENTS }}
      run: |
        set -euo pipefail
        echo "üßπ Fetching list of deployments to clean up..."
        API_URL="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT_NAME}"
        
        DEPLOYMENTS_JSON=$(curl -s --fail -X GET "${API_URL}/deployments" -H "Authorization: Bearer ${CF_API_TOKEN}")
        
        IDS_TO_DELETE=$(echo "$DEPLOYMENTS_JSON" | jq -r ".result | sort_by(.created_on) | reverse | .[${KEEP}:] | .[]? | .id")

        if [ -z "$IDS_TO_DELETE" ]; then
            echo "üëç No old deployments to delete."
            exit 0
        fi

        echo "üóëÔ∏è The following old deployment IDs will be deleted:"
        echo "$IDS_TO_DELETE"
        
        for id in $IDS_TO_DELETE; do
            echo "   - Attempting to delete deployment: $id"
            
            RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE "${API_URL}/deployments/${id}" \
              -H "Authorization: Bearer ${CF_API_TOKEN}")
              
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            if [ "$HTTP_CODE" -eq 200 ]; then
                echo "     ‚úÖ Successfully deleted."
            else
                echo "     ‚ö†Ô∏è Failed to delete deployment $id. API returned status $HTTP_CODE."
                echo "     Response Body: $BODY"
            fi
        done
        echo "‚úÖ Cleanup complete."

  # JOB 2: Cleanup workflow runs to keep the Actions history clean
  cleanup-runs:
    runs-on: ubuntu-latest
    needs: update-proxies
    if: always()
    permissions:
      actions: write
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
